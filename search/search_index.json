{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome","title":"Welcome","text":"<p>Tenes Emapandas Graciela is a clone of 'Plan T\u00e1ctico y Estrat\u00e9gico de la Guerra', which is a pseudo-clone of Risk, a multiplayer turn-based strategy game. Some rules are different.</p> <p></p>"},{"location":"hacking/","title":"Hacking","text":"<p>So you want to help the developent of TEG? cool!</p>"},{"location":"hacking/#how-to-send-changes","title":"How to send changes","text":"<p>The easiest way to get your changes included is to fork the project, and let us know about your changes with a pull request. If you don't like to have an account on github, you still can clone our repository (via https), and push your changes to a different service.</p> <p>You also can use git format-patch to create a patch series. But we strongly prefer to have a \"real\" git repository to deal with, since it is much easier to work with than patches.</p>"},{"location":"hacking/#first-steps","title":"First steps","text":"<p>If you want to join the development of the software, you need to install the development packages of the used libraries. For Debian based environments, you can use the list in the file <code>docker/debian</code></p> <p>When you have the requirements, you can run <code>./build</code> in the root directory.</p> <p>.. warning:: This script always erases the build directory first.</p> <p>This script</p> <ul> <li>creates the autotools build infrastructure</li> <li>creates a local build directory (<code>bd</code>), which is ignored by git</li> <li> <p>configures this build directory</p> </li> <li> <p>With autotools maintainer mode (so you don't have to manually re-run     autoconf/automake/... whenever you touch the build configuration)</p> </li> <li>Turns compiler warnings into errors</li> <li>installs the software into <code>bd/DD</code></li> <li>build the software an run the unit tests</li> </ul> <p>Once the <code>build</code> script finished, you can \"install\" the software with <code>make -C bd install</code>, and then run it with <code>bd/DD/bin/tegclient</code>.</p>"},{"location":"hacking/#coding-style","title":"Coding style","text":"<p>This code style describes how the code should look at the end. We know that at the moment the current code does not look like it. When you change existing code, or write new functionality, please try to follow this style.</p>"},{"location":"hacking/#whitespaces-and-braces","title":"Whitespaces and braces","text":"<p>We use the K&amp;R-Style with tabs for block indentation, and spaces for continuation indentation.</p> <p>Braces are set unconditionally, even if there is only one statement in your if/while/for block. See the famous \"goto fail\" bug why this is a good idea.</p> <p>You can use <code>scripts/style</code> to format your sources according to the common style. When you use an IDE, you probably can also set it up that it will reformat on every save.</p>"},{"location":"hacking/#general-style-rules","title":"General style rules","text":""},{"location":"hacking/#functions-and-code-blocks","title":"Functions and code blocks","text":"<p>Limit the size of your functions. Every function spanning more than one page or is deeply nested is hard to comprehend. You should split those functions into smaller ones and give them appropriate names.</p> <p>Try to write algebraic functions, which don't rely on global state. This kind of function is much easier to test. Also when you use such a function, you can be sure that it behaves always the same way when you give it the same parameters.</p>"},{"location":"hacking/#comments","title":"Comments","text":"<p>Good comments can make the code better understandable. But bad comments can make everything worse. In case of doubt try to clean up your code and introduce little helper functions. It is better to have easy to understand code than to have good comments which explain bad code.</p>"},{"location":"hacking/#general-quality","title":"General quality","text":"<p>Don't introduce new compiler warnings, they usually point to underlying problems. This is especially true for C code, where the compiler can do very bad things if it does not see a function declaration.</p>"},{"location":"hacking/#language","title":"Language","text":"<p>New code uses C++20. We don't try to support ancient compilers.</p>"},{"location":"hacking/#built-in-data-types","title":"Built in data types","text":"<p>Use the correct data type for each fact. When you have something which can be expressed as boolean, use bool (use <code>#include &lt;stdbool.h&gt;</code> in C code to get this type). If the thing can't be negative, use unsigned. If you need an integer of a defined width use the types from <code>&lt;stdint.h&gt; / &lt;cstdint&gt;</code>. When you iterate through an array by index, use std::size_t (or unsigned for some legacy code).</p> <p>Prefer enumerations over integer or boolean types. Especially when they appear in function calls, enumerations can make the situation easier to understand.</p> <p><pre><code>  frobnicate(23, true, false);\n\n  frobnicate(first_thing_from_left, with_foo, without_bar);\n</code></pre> Use class enums in C++ code.</p>"},{"location":"hacking/#error-handling","title":"Error handling","text":"<p>Use <code>assert()</code> to check conditions in the code which are pre and postconditions (like that an output pointer is not NULL). Don't use assert on functions with side effects (assert calls can be disabled by configuration).</p> <pre><code>  // do\n\n  const bool ok=frobnicate();\n  assert(ok);\n\n  // don't: the call to frobnicate can be eliminated in non-debug builds\n  assert(frobnicate());\n</code></pre>"},{"location":"hacking/#variables","title":"Variables","text":""},{"location":"hacking/#const","title":"Const","text":"<p>Const is your friend. Use it wherever possible.</p>"},{"location":"hacking/#initialization","title":"Initialization","text":"<p>Try to avoid split variable definition and initialization. Especially don't put variable definitions at the top of functions. The time when compilers needed this is gone.</p>"},{"location":"hacking/#scope-and-variable-reuse","title":"Scope and variable reuse","text":"<p>Limit the scope of variables to the most inner block possible. This make the code more readable and reduces the possibility to introduce errors.</p> <p>Good:</p> <pre><code>  for(std::size_t i=0; i&lt;(sizeof(array)/sizeof(*array)); i++) {\n      // for C code\n  }\n\n  for(std::size_t i=0; i&lt;std::extent&lt;decltype(array)&gt;::value; i++) {\n      // for C++ code\n  }\n</code></pre> <p>Better:</p> <pre><code>  for(auto const&amp; value: array) {\n      // when you don't need the array position you can just iterate over the\n    // fields\n  }\n</code></pre> <p>Bad:</p> <pre><code>  int i; // no initialization\n\n  ...\n\n  for(i=0; i&lt;(sizeof(array)/sizeof(*array)); i++) { // signed loop variable\n      ...\n  }\n\n  for(i=0; i&lt;N_ARRAY_COUNT; i++) { // limit not calculated from the array\n      ...\n  }\n\n  for(i=0; i&lt;23; i++) { // magic number and variable recycling\n      ...\n  }\n</code></pre>"},{"location":"hacking/#return-values","title":"Return values","text":"<p>Don't use <code>TEG_STATUS</code> for new code. This type is a dependency magnet, and does all kind of harm in different parts of the code.</p> <p>When your function can't return anything, then don't return anything. This rule ensures that the calling function does not have to cope with error handling. When you return a constant in this case, it is very likely that the error handling in the calling code either does not exist, or is defect.</p> <p>If the function only can fail or pass, use bool, and make your function sound natural to this. Like <code>can_start_game()</code> or <code>is_human_player()</code>.</p>"},{"location":"hacking/#objects-in-global-space","title":"Objects in global space","text":"<p>Avoid global space. The code right now uses much of it, and this makes it very painful to work with.</p>"},{"location":"hacking/#tests","title":"Tests","text":"<p>New functionality has to be accompanied with unit tests.</p>"},{"location":"hacking/#documentation","title":"Documentation","text":"<p>Put doxygen comments into the header for newly added parts (should the day come, and parts of teg wander into a library, the header are the parts which are available, while the sources are not).</p> <p>Write down what the reason for this function is, together with pre and post conditions.</p>"},{"location":"hacking/#checklist-for-a-new-release","title":"Checklist for a new release","text":""},{"location":"hacking/#preparing-the-release","title":"Preparing the release","text":"<ul> <li>Does it compile on the CI?</li> <li>Append all new contributors to /PEOPLE</li> <li>Fill out /CHANGELOG</li> <li>use <code>gitk \u00bbprevious-release-tag\u00ab \u00bbcurrent-release-branch\u00ab</code> to review the     changes since the last release</li> <li>summary of the most important changes</li> <li>reference issues,pull requests or git commit hashes when needed, especially     for security related events</li> </ul>"},{"location":"hacking/#doing-the-release","title":"Doing the release","text":"<p>Create an annotated tag in the form <code>\u00bbnum\u00ab.\u00bbnum\u00ab.\u00bbnum\u00ab</code>. Don't add any prefix or suffix. The tag has to match the version of <code>AC_INIT</code> in <code>/configure.ac</code></p>"},{"location":"hacking/#after-the-release","title":"After the release","text":"<ul> <li>Do a version bump in <code>/configure.ac</code> for the following bug fix release</li> <li>Merge the release branch to <code>master</code> (keep an eye on the Changelog and   version, since they tend to get messed up during the merge)</li> </ul>"},{"location":"install/","title":"Install","text":""},{"location":"install/#installation-instructions","title":"Installation Instructions","text":"<p>Copyright (C) 1994, 1995, 1996, 1999, 2000, 2001, 2002, 2004, 2005 Free Software Foundation, Inc.</p> <p>This file is free documentation; the Free Software Foundation gives unlimited permission to copy, distribute and modify it.</p>"},{"location":"install/#build-dependencies","title":"Build dependencies","text":""},{"location":"install/#debian","title":"Debian","text":"<pre><code>apt-get update &amp;&amp; \\\n    DEBIAN_FRONTEND=noninteractive apt-get install --yes \\\n            build-essential debhelper gettext \\\n            libgoocanvas-2.0-dev libtool libxml2-dev \\\n            xmlto libgmock-dev\n</code></pre>"},{"location":"install/#suse","title":"SuSE","text":"<pre><code>zypper --non-interactive  update &amp;&amp; \\\n    zypper --non-interactive install -y automake autoconf libtool gcc10-c++ \\\n    gettext gettext-tools make tidy gmock \\\n    'pkgconfig(glib-2.0)' 'pkgconfig(libgnomeui-2.0)' 'pkgconfig(libxml-2.0)' \\\n    'perl(XML::Parser)' 'pkgconfig(goocanvas-2.0)' pkgconfig xmlto xz &amp;&amp; \\\n    cd /usr/bin &amp;&amp; ln -s gcc-10 gcc &amp;&amp; ln -s g++-10 g++\n</code></pre>"},{"location":"install/#basic-installation","title":"Basic Installation","text":"<p>These are generic installation instructions.</p> <p>The 'configure' shell script attempts to guess correct values for various system-dependent variables used during compilation.  It uses those values to create a 'Makefile' in each directory of the package. It may also create one or more '.h' files containing system-dependent definitions.  Finally, it creates a shell script 'config.status' that you can run in the future to recreate the current configuration, and a file 'config.log' containing compiler output (useful mainly for debugging 'configure').</p> <p>It can also use an optional file (typically called 'config.cache' and enabled with '--cache-file=config.cache' or simply '-C') that saves the results of its tests to speed up reconfiguring.  (Caching is disabled by default to prevent problems with accidental use of stale cache files.)</p> <p>If you need to do unusual things to compile the package, please try to figure out how 'configure' could check whether to do them, and mail diffs or instructions to the address given in the 'README' so they can be considered for the next release.  If you are using the cache, and at some point 'config.cache' contains results you don't want to keep, you may remove or edit it.</p> <p>The file 'configure.ac' (or 'configure.in') is used to create 'configure' by a program called 'autoconf'.  You only need 'configure.ac' if you want to change it or regenerate 'configure' using a newer version of 'autoconf'.</p> <p>The simplest way to compile this package is:</p> <ol> <li> <p>'cd' to the directory containing the package's source code and type      './configure' to configure the package for your system.  If you're      using 'csh' on an old version of System V, you might need to type      'sh ./configure' instead to prevent 'csh' from trying to execute      'configure' itself.</p> <p>Running 'configure' takes awhile.  While running, it prints some  messages telling which features it is checking for.</p> </li> <li> <p>Type 'make' to compile the package.</p> </li> <li> <p>Optionally, type 'make check' to run any self-tests that come with      the package.</p> </li> <li> <p>Type 'make install' to install the programs and any data files and      documentation.</p> </li> <li> <p>You can remove the program binaries and object files from the      source code directory by typing 'make clean'.  To also remove the      files that 'configure' created (so you can compile the package for      a different kind of computer), type 'make distclean'.  There is      also a 'make maintainer-clean' target, but that is intended mainly      for the package's developers.  If you use it, you may have to get      all sorts of other programs in order to regenerate files that came      with the distribution.</p> </li> </ol>"},{"location":"install/#compilers-and-options","title":"Compilers and Options","text":"<p>Some systems require unusual options for compilation or linking that the 'configure' script does not know about.  Run './configure --help' for details on some of the pertinent environment variables.</p> <p>You can give 'configure' initial values for configuration parameters by setting variables in the command line or in the environment.  Here is an example: <pre><code>./configure CC=c89 CFLAGS=-O2 LIBS=-lposix\n</code></pre></p> Note <p>Defining Variables::, for more details.</p>"},{"location":"install/#compiling-for-multiple-architectures","title":"Compiling For Multiple Architectures","text":"<p>You can compile the package for more than one kind of computer at the same time, by placing the object files for each architecture in their own directory.  To do this, you must use a version of 'make' that supports the 'VPATH' variable, such as GNU 'make'.  'cd' to the directory where you want the object files and executables to go and run the 'configure' script.  'configure' automatically checks for the source code in the directory that 'configure' is in and in '..'.</p> <p>If you have to use a 'make' that does not support the 'VPATH' variable, you have to compile the package for one architecture at a time in the source code directory.  After you have installed the package for one architecture, use 'make distclean' before reconfiguring for another architecture.</p>"},{"location":"install/#installation-names","title":"Installation Names","text":"<p>By default, 'make install' installs the package's commands under '/usr/local/bin', include files under '/usr/local/include', etc.  You can specify an installation prefix other than '/usr/local' by giving 'configure' the option '--prefix=PREFIX'.</p> <p>You can specify separate installation prefixes for architecture-specific files and architecture-independent files.  If you pass the option '--exec-prefix=PREFIX' to 'configure', the package uses PREFIX as the prefix for installing programs and libraries. Documentation and other data files still use the regular prefix.</p> <p>In addition, if you use an unusual directory layout you can give options like '--bindir=DIR' to specify different values for particular kinds of files.  Run 'configure --help' for a list of the directories you can set and what kinds of files go in them.</p> <p>If the package supports it, you can cause programs to be installed with an extra prefix or suffix on their names by giving 'configure' the option '--program-prefix=PREFIX' or --program-suffix=SUFFIX'.</p>"},{"location":"install/#optional-features","title":"Optional Features","text":"<p>Some packages pay attention to '--enable-FEATURE' options to 'configure', where FEATURE indicates an optional part of the package. They may also pay attention to '--with-PACKAGE' options, where PACKAGE is something like 'gnu-as' or 'x' (for the X Window System).  The 'README' should mention any '--enable-' and '--with-' options that the package recognizes.</p> <p>For packages that use the X Window System, 'configure' can usually find the X include and library files automatically, but if it doesn't, you can use the 'configure' options '--x-includes=DIR' and '--x-libraries=DIR' to specify their locations.</p>"},{"location":"install/#specifying-the-system-type","title":"Specifying the System Type","text":"<p>There may be some features 'configure' cannot figure out automatically, but needs to determine by the type of machine the package will run on. Usually, assuming the package is built to be run on the same architectures, 'configure' can figure that out, but if it prints a message saying it cannot guess the machine type, give it the '--build=TYPE' option.  TYPE can either be a short name for the system type, such as 'sun4', or a canonical name which has the form:</p> <pre><code> CPU-COMPANY-SYSTEM\n</code></pre> <p>where SYSTEM can have one of these forms:</p> <pre><code> OS KERNEL-OS\n</code></pre> <p>See the file 'config.sub' for the possible values of each field.  If 'config.sub' isn't included in this package, then this package doesn't need to know the machine type.</p> <p>If you are building compiler tools for cross-compiling, you should use the option '--target=TYPE' to select the type of system they will produce code for.</p> <p>If you want to use a cross compiler, that generates code for a platform different from the build platform, you should specify the \"host\" platform (i.e., that on which the generated programs will eventually be run) with '--host=TYPE'.</p>"},{"location":"install/#sharing-defaults","title":"Sharing Defaults","text":"<p>If you want to set default values for 'configure' scripts to share, you can create a site shell script called 'config.site' that gives default values for variables like 'CC', 'cache_file', and 'prefix'. 'configure' looks for 'PREFIX/share/config.site' if it exists, then 'PREFIX/etc/config.site' if it exists.  Or, you can set the 'CONFIG_SITE' environment variable to the location of the site script. A warning: not all 'configure' scripts look for a site script.</p>"},{"location":"install/#defining-variables","title":"Defining Variables","text":"<p>Variables not defined in a site shell script can be set in the environment passed to 'configure'.  However, some packages may run configure again during the build, and the customized values of these variables may be lost.  In order to avoid this problem, you should set them in the 'configure' command line, using 'VAR=value'.  For example:</p> <pre><code> ./configure CC=/usr/local2/bin/gcc\n</code></pre> <p>causes the specified 'gcc' to be used as the C compiler (unless it is overridden in the site shell script).  Here is a another example:</p> <pre><code> /bin/bash ./configure CONFIG_SHELL=/bin/bash\n</code></pre> <p>Here the 'CONFIG_SHELL=/bin/bash' operand causes subsequent configuration-related scripts to be executed by '/bin/bash'.</p>"},{"location":"install/#configure-invocation","title":"'configure' Invocation","text":"<p>'configure' recognizes the following options to control how it operates.</p> <p>'--help' '-h'      Print a summary of the options to 'configure', and exit.</p> <p>'--version' '-V'      Print the version of Autoconf used to generate the 'configure'      script, and exit.</p> <p>'--cache-file=FILE'      Enable the cache: use and save the results of the tests in FILE,      traditionally 'config.cache'.  FILE defaults to '/dev/null' to      disable caching.</p> <p>'--config-cache' '-C'      Alias for '--cache-file=config.cache'.</p> <p>'--quiet' '--silent' '-q'      Do not print messages saying which checks are being made.  To      suppress all normal output, redirect it to '/dev/null' (any error      messages will still be shown).</p> <p>'--srcdir=DIR'      Look for the package's source code in directory DIR.  Usually      'configure' can determine that directory automatically.</p> <p>'configure' also accepts some other, not widely useful, options.  Run 'configure --help' for more details.</p>"},{"location":"manual/","title":"Manual","text":""},{"location":"manual/#tenes-empanadas-graciela-manual","title":"Tenes Empanadas Graciela Manual","text":""},{"location":"manual/#introduction","title":"Introduction","text":"<p>Tenes Empandas Graciela (TEG), is a clone of an Argentinian game called 'Plan T\u00e1ctico y Estr\u00e1tegico de la Guerra', a modified clone of the turn based strategy game 'Risk'. It is a multi-player game that can be played across the Internet.</p> <p>The target of the game is to conquer all the countries of the world, which are displayed in a map, or to accomplish your secret mission (if you prefer to play with secret missions). In order to achieve this goal, the player is supposed to create a certain strategy (i.e. try to conquer one continent in the first place, protecting its borders once this first step have been achieved. Only then, try to conquer another continent).</p>"},{"location":"manual/#playing-the-game","title":"Playing the game","text":"<p>Connecting to the server</p> <p>To connect to the server, you must know the address and port of the server. The well-known port of the server is 2000. You must tell the client this through the connect dialog.</p> <p></p> <p>After filling the 'Connect Dialog', you'll have a new dialog, which will ask your favorite color.</p> <p></p> <p>If you select a color that it isn't available, the server will select a color for you</p>"},{"location":"manual/#starting-the-game","title":"Starting the game","text":"<p>In order to start the game, there should be at least 2 and a maximum of 6 players connected to the server. Once connected, any of the said players can start the game by clicking on the start button of his client. No more players are allowed when the game has already started</p> <p>After clicking on the start button, the 'Type of Game' dialog will appear.</p> <p></p> <p>The server, will then distribute all the countries at random among the players, providing each country with an army.</p> Note <p>One can also connect to the server as an observer. This enables to follow the game, but not to play. It is noteworthy to keep in mind that there is a maximum number of 9 connections permitted in this mode.</p>"},{"location":"manual/#placing-the-armies-for-1st-time","title":"Placing the armies for 1st time","text":"<p>To place the the armies for 1st time, you must wait your turn. Once you are given the turn, you must place 5 armies in your countries. After that, send them to the server clicking on send armies button. Then, you must wait again for your turn, and place another 3 armies in your countries. You can place all the armies in one country if you want (there is no limit on the number of armies per country). Once all the players have placed the 8 armies, you will be able to attack.</p>"},{"location":"manual/#attacking-an-enemy","title":"Attacking an enemy","text":"<p>To attack an enemy, you must wait for your turn. When you receive the turn you can attack as many times as you want. To attack, you must select 2 countries: the source country (your country), and the destination country (your opponent country). The source country must have at least 2 armies, but there is no restriction on the quantity of the destination country. The source and destination countries must be frontier. Frontiers countries are the ones that have common borders or a line that connects them.</p> <p>When you attack, you throw 'n' dices, where 'n' is the number of armies that you have in your country minus one, but no more than 3. Your enemy will throw 'm' dices, where 'm' is the number of armies that he has in his country, but no more than 3. After that, the results of the dices are sorted in a descedig order.</p> <p>The results are compared, the greatest result, with the greatest result, and so on. If the there is a draw, or if the destination's result is greater, then the source country must take one of his armies off, otherwise the destination country must take one of his armies off.</p> <p>You will conquer the country if your opponent runs out of armies. In that case you can move as much as 3 armies to the conquered country (from the source country)</p> <p>Armies example:    - If you have 3 armies, and your opponent has 3 armies, you will throw 2 dices, and your opponent 3.    - If you have 5 armies, and your opponent has 2 armies, you will throw 3 dices, and your opponent 2.    - If you have 1 army, you cant attack</p> <p>Dices example:    - If you get a: 6, 4, 2, and your opponent gets 6, 3, the result is: 6 vs. 6,       and your opponent wins (you take away one of your armies),       and the other is:4 vs. 3 , and you win (your opponent takes away one of his armies).    - If you get a: 4, 2, 2, and your opponent gets 3, 2, 1, the result is: 4 vs. 3,      and you wins (your opponent has to take away one of his armies). The 2nd result is:2 vs. 2,      and your opponent wins (so you have to take away one of your armies), and the last result is 2 vs. 1 and here you win,       and your opponent has to take away one of his armies.</p> Tip <p>Don't attack a country that has more armies than yours</p>"},{"location":"manual/#after-the-attack","title":"After the attack","text":"<p>After your attack you can Regroup your armies. You can move as much as 3 armies from one country to another one (they must be frontier countries), and the army that is moved once, won't be able to be moved again in that turn. After you finish your Regroup armies, and before you End your turn you can Get country card. If you want to Get country card you must have conquered at least one country in your turn, and if that is OK,  you will be given a country card chosen randomly. If the country that represents the card is yours, that country will be added 2 armies automatically. Otherwise you will be allowed to place 2 armies later if you conquer it. There are 4 types of cards: galleon, cannon, balloon or a joker. When you have 3 different cards or 3 cards of the same type you can exchange them for armies.</p> Number of exchange Quantity of armies received 1 4 2 7 3 10 (and now add 5) 4 15 5 20 ... ... <p>After the 3rd exchange, you will have to conquer 2 countries (instead of one) to 'get a country card'</p> <p>Finally, you must press End turn to finish your turn, and give it to the next player</p>"},{"location":"manual/#a-new-turn","title":"A new turn","text":"<p>When all the players finished their turns, a new turn will start. This time, the first player to start will be the 2nd player of the last turn. This player will have to place a certain amount of armies in his countries.  If a player has conquered an entire continent, he will have to place:</p> Continent Quantity of armies South America 3 North America 5 Africa 3 Europe 5 Asia 7 Oceania 2 Note <p>Those armies must be placed in the conquered continent</p> <p>After all the players have finished placing their armies, you will be able to attack again.</p>"},{"location":"manual/#playing-with-secret-missions","title":"Playing with secret missions","text":"<p>You can choose between playing with secret mission, or to conquer the world.</p> <p></p> Note <p>If you know that only 2 players are going to play, its better to use the 'conquer the world' option</p> <p>If you play with secret mission, you can win achieving your secret mission, or achieving the common 'secret' mission, which is to conquer 30 countries of the world. If you play with conquer the world you win only conquering the entire world.</p> <p>The winner is the player who achieves his mission first. You can also, change the type of game from the server's console. Just type set conquer_world=0 or set conquer_world=1 to switch between secret missions or conquer the world.</p>"},{"location":"manual/#viewing-your-mission","title":"Viewing your mission","text":"<p>To view your secret mission, just click on view-&gt;mission in the client</p> <p></p>"},{"location":"manual/#the-server","title":"The Server","text":""},{"location":"manual/#strating-the-server","title":"Strating the server","text":"<p>You can start the server, executing the command tegserver or from the connect dialog of the client, clicking in the Start server locally</p> <p></p>"},{"location":"manual/#server-commands","title":"Server commands","text":"<p>The server has very useful commands to configure it. Just type help and you will see all the available commands.</p> <p></p>"},{"location":"manual/#history","title":"History","text":""},{"location":"manual/#brief-history-of-teg","title":"Brief history of TEG","text":"<p>riq</p> <p>Sebasti\u00e1n Cativa Tolosa, once told me to do this game. I think that was in 1996, in a chat we were having in the University. Well, we started to think the game. But I don't know why, the project died after 3 or 4 months. In 1998, the project was reactivated, but after 2 weeks it died again :(. Finally, in February 2000, I started the game again, and it seems that it is not dead :-).</p> <p>wfx, now we have 2024 and it is still alive :fontawesome-regular-face-laugh-wink:</p>"},{"location":"people/","title":"People","text":""},{"location":"people/#authors-of-teg","title":"Authors of TEG","text":"<p>Ricardo Quesada (riq) riq@corest.com     The main author</p> <p>Wolfgang Morawetz (wfx) wfx.gihub@mailbox.org     The main artist</p>"},{"location":"people/#main-contributors","title":"Main Contributors","text":"<p>R\u00fcdiger Ranft-Driscoll teg@qzzq.de   172 commits and now we have TEG V0.12</p> <p>Eric Romanenghi ericromanenghi@gmail.com   https://github.com/eternautaCAT   Work on Gnome2 to GTK3 only porting.</p> <p>Raymond Ostertag raymond.linux@free.fr     Creator of the Realist theme</p> <p>Thomas R. Koll tomk32@tomk32.de     Minor fixes, dialog add-ons, suggestions     Gave the idea of the 'Fog of War' mode</p>"},{"location":"people/#translators","title":"Translators","text":"<p>Arkadiusz Lipiec alipiec@elka.pw.edu.pl     Polish translator and Polish Documentator</p> <p>Thomas R. Koll tomk32@tomk32.de     German translator</p> <p>Benoit Timbert Benoit.TIMBERT@free.fr     French translator</p> <p>Luigi Toscano ltosky@yahoo.it     Itialian translator</p> <p>Jos\u00e9 Jorge jose.jorge@oreka.com     Portuguese translator</p> <p>Antonio Augusto Todo Bom Neto antonio@projetos.etc.br     Brazilian translator</p> <p>Ricardo Quesada riq@corest.com     Spanish translator</p>"},{"location":"people/#packages-mantainers","title":"Packages mantainers","text":"<p>Davide Puricelli evo@debian.org     Debian package maintainer</p> <p>Guillaume Cottenceau gc@mandrakesoft.com     Mandrake package maintainer</p> <p>Maxim Sobolev sobomax@freebsd.org     FreeBSD port maintainer</p>"},{"location":"people/#random-contributors","title":"Random contributors","text":"<p>Reiner Herrmann reiner@reiner-h.de     Bugfixes to the build system and parser code.</p> <p>cheese1 cheese@nosuchhost.net     Documentation fix</p> <p>Ferdinand Thiessen rpm@fthiessen.de     Pointing out a double definition bug</p> <p>Francisco Demartino demartino.francisco@gmail.com     Documentation fix</p> <p>Harmen harm@millionmonkeys.nl     GUI patches</p> <p>nordi nordi@addcom.de     Fixed remote format string vulnerability</p> <p>Jason Short jshort@devon.dhs.org     Contributed binary with GGZ configuration + RH spec for that</p> <p>Andreas Henningsson andreas.henningsson@solvus.se     Suggested Surrender option</p> <p>Justin Zaun jzaun@telerama.com     Gave me the idea of adding GGZ support to TEG</p> <p>Benoit Rousseau roussebe@esstin.uhp-nancy.fr     Patches for launching server</p> <p>Julio Santa Cruz jscruz@xtech.com.ar     Patch that fixes the order or names in regroup</p> <p>Luciano Notarfrancesco luciano@corest.com     the Redhat 7 package builder</p> <p>David Haller david@dhaller.de     Contributed binary &amp; SuSE spec     Contributed with typo errors, and fixes</p> <p>Rich West Rich.West@wesmo.com     Contributed RedHat binary &amp; source for v0.9.4</p>"},{"location":"people/#special-thanks-to","title":"Special thanks to","text":"<p>Sebastian Cativa Tolosa scativa@dc.uba.ar     The one who give the idea of doing the game!</p> <p>Hernan Ochoa hochoa@corest.com     the first Beta tester</p> <p>R\u00fcdiger Ranft-Driscoll teg@qzzq.de   ... to mutch to write :)</p>"},{"location":"todo/","title":"ToDo","text":""},{"location":"todo/#todo","title":"ToDo","text":""},{"location":"todo/#roadmap","title":"Roadmap","text":"<p>This file represents what I would like to be included, in more or less a chronological time.</p> <p>Between brackets its the time in X. From 1 to 10: 1 short time, 10 lot of time.</p> <p>for:</p> <ul> <li> <p>0.9.0 [released December 9th, 2001]</p> <ul> <li>[100%] quit/rejoin the game (3)</li> <li>[100%] scores (4)</li> <li>[80%] use wfx's graphics in more dialogs</li> <li>[100%] change the icon from the ballon to a real empanada</li> </ul> </li> <li> <p>0.9.1</p> <ul> <li>[100%] updated documentation</li> </ul> </li> <li> <p>0.9.2</p> <ul> <li>[100%] fix dialogs (status, gameover, etc)</li> </ul> </li> <li> <p>0.9.3</p> <ul> <li>non-blocking sockets, or similar (3)      . Apply Benoit Rousseau's patch</li> </ul> </li> <li> <p>0.9.4</p> <ul> <li>a light-weight dice animation     . show dice1.png -&gt; dice2.png ... -&gt; dice6.png simulating   the roll ?</li> </ul> </li> <li> <p>0.9.5</p> <ul> <li>[20%] Metaserver (5)     . Use the same protocol of GGZ metaserver     . perhpas in python ?</li> </ul> </li> <li> <p>0.9.6</p> <ul> <li>New Score System  . Implement a new score system  . Document the new score system</li> </ul> </li> <li> <p>0.9.7</p> <ul> <li>Plugin for the bots to improve their vocabulary  . Eliza ?</li> </ul> </li> <li> <p>0.10.0</p> <ul> <li>[100%] Add a CTF game option, based on an idea by Thomas R. Koll (7)  . People only see threirs countries, and only see the enemy when    they start the attack. If a player conquer the country with    a flag, the player without the flag looses the game.</li> </ul> </li> <li> <p>0.11.0</p> <ul> <li> <p>Improve robots (5) . Rewrite the algorithm</p> </li> <li> <p>[50%] finish the 'deals' support (5) . finish the work that was started</p> </li> <li> <p>[100%] a new way to show the teg_dialog (5) .perhaps with 'teg_status_bar' on the left/right/top, or dont know.</p> </li> <li> <p>a heavy-weight dice animation . use wfx's animation</p> </li> </ul> </li> <li> <p>0.12.0</p> <ul> <li>[100%] port from gtk2/gnome to gt3 only</li> </ul> </li> <li> <p>0.13.0</p> <ul> <li>[? %] add a server test mode (single player only) where we can set all game data (to find bugs).</li> </ul> </li> <li> <p>0.13.1</p> <ul> <li>Move the config from ~/.teg to ~/.config/teg</li> <li>Change all sf entries</li> <li>[60%] Remove the old Gnome-Help documentation and upoad a new one to GitHub.</li> <li>[80%] Make a new default theme. </li> </ul> </li> <li> <p>0.14.0</p> <ul> <li>save/resume the game (5)</li> <li>add tools to view a game in fast forward and that</li> </ul> </li> <li> <p>1.0.0</p> <ul> <li>Configurable map, with different scenarios. Eg: Rome, Europe, and current war conflicts (9)</li> <li>Different rules for the game, eg: Risk rules, TEG rules, 1914 rules, etc, defined in a script language (python?) (8)</li> </ul> </li> </ul> <p>riq, wfx.</p>"}]}